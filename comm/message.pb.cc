// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#include "message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace itach_oj {
PROTOBUF_CONSTEXPR CompileRunRequest::CompileRunRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.code_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.input_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.cpu_limit_)*/0
  , /*decltype(_impl_.mem_limit_)*/0
  , /*decltype(_impl_.language_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompileRunRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompileRunRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompileRunRequestDefaultTypeInternal() {}
  union {
    CompileRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompileRunRequestDefaultTypeInternal _CompileRunRequest_default_instance_;
PROTOBUF_CONSTEXPR CompileRunResponse::CompileRunResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.reason_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_stdout_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.proto_stderr_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.last_error_input_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.status_)*/0
  , /*decltype(_impl_.pass_num_)*/0
  , /*decltype(_impl_.total_num_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct CompileRunResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CompileRunResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CompileRunResponseDefaultTypeInternal() {}
  union {
    CompileRunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CompileRunResponseDefaultTypeInternal _CompileRunResponse_default_instance_;
}  // namespace itach_oj
static ::_pb::Metadata file_level_metadata_message_2eproto[2];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_message_2eproto[1];
static const ::_pb::ServiceDescriptor* file_level_service_descriptors_message_2eproto[1];

const uint32_t TableStruct_message_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunRequest, _impl_.code_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunRequest, _impl_.input_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunRequest, _impl_.cpu_limit_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunRequest, _impl_.mem_limit_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunRequest, _impl_.language_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunResponse, _impl_.status_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunResponse, _impl_.reason_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunResponse, _impl_.proto_stdout_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunResponse, _impl_.proto_stderr_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunResponse, _impl_.pass_num_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunResponse, _impl_.total_num_),
  PROTOBUF_FIELD_OFFSET(::itach_oj::CompileRunResponse, _impl_.last_error_input_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::itach_oj::CompileRunRequest)},
  { 11, -1, -1, sizeof(::itach_oj::CompileRunResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::itach_oj::_CompileRunRequest_default_instance_._instance,
  &::itach_oj::_CompileRunResponse_default_instance_._instance,
};

const char descriptor_table_protodef_message_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmessage.proto\022\010itach_oj\"\265\001\n\021CompileRun"
  "Request\022\014\n\004code\030\001 \001(\t\022\r\n\005input\030\002 \001(\t\022\021\n\t"
  "cpu_limit\030\003 \001(\005\022\021\n\tmem_limit\030\004 \001(\005\0226\n\010la"
  "nguage\030\005 \001(\0162$.itach_oj.CompileRunReques"
  "t.Language\"%\n\010Language\022\007\n\003CPP\020\000\022\010\n\004JAVA\020"
  "\001\022\006\n\002GO\020\002\"\237\001\n\022CompileRunResponse\022\016\n\006stat"
  "us\030\001 \001(\005\022\016\n\006reason\030\002 \001(\t\022\024\n\014proto_stdout"
  "\030\003 \001(\t\022\024\n\014proto_stderr\030\004 \001(\t\022\020\n\010pass_num"
  "\030\005 \001(\005\022\021\n\ttotal_num\030\006 \001(\005\022\030\n\020last_error_"
  "input\030\007 \001(\t2W\n\021CompileRunService\022B\n\005Star"
  "t\022\033.itach_oj.CompileRunRequest\032\034.itach_o"
  "j.CompileRunResponseB\003\200\001\001b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_message_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_message_2eproto = {
    false, false, 473, descriptor_table_protodef_message_2eproto,
    "message.proto",
    &descriptor_table_message_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_message_2eproto::offsets,
    file_level_metadata_message_2eproto, file_level_enum_descriptors_message_2eproto,
    file_level_service_descriptors_message_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_message_2eproto_getter() {
  return &descriptor_table_message_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_message_2eproto(&descriptor_table_message_2eproto);
namespace itach_oj {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompileRunRequest_Language_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_enum_descriptors_message_2eproto[0];
}
bool CompileRunRequest_Language_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CompileRunRequest_Language CompileRunRequest::CPP;
constexpr CompileRunRequest_Language CompileRunRequest::JAVA;
constexpr CompileRunRequest_Language CompileRunRequest::GO;
constexpr CompileRunRequest_Language CompileRunRequest::Language_MIN;
constexpr CompileRunRequest_Language CompileRunRequest::Language_MAX;
constexpr int CompileRunRequest::Language_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class CompileRunRequest::_Internal {
 public:
};

CompileRunRequest::CompileRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:itach_oj.CompileRunRequest)
}
CompileRunRequest::CompileRunRequest(const CompileRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompileRunRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.input_){}
    , decltype(_impl_.cpu_limit_){}
    , decltype(_impl_.mem_limit_){}
    , decltype(_impl_.language_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_code().empty()) {
    _this->_impl_.code_.Set(from._internal_code(), 
      _this->GetArenaForAllocation());
  }
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_input().empty()) {
    _this->_impl_.input_.Set(from._internal_input(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.cpu_limit_, &from._impl_.cpu_limit_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.language_) -
    reinterpret_cast<char*>(&_impl_.cpu_limit_)) + sizeof(_impl_.language_));
  // @@protoc_insertion_point(copy_constructor:itach_oj.CompileRunRequest)
}

inline void CompileRunRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.code_){}
    , decltype(_impl_.input_){}
    , decltype(_impl_.cpu_limit_){0}
    , decltype(_impl_.mem_limit_){0}
    , decltype(_impl_.language_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.code_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.code_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompileRunRequest::~CompileRunRequest() {
  // @@protoc_insertion_point(destructor:itach_oj.CompileRunRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompileRunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.code_.Destroy();
  _impl_.input_.Destroy();
}

void CompileRunRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompileRunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:itach_oj.CompileRunRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.code_.ClearToEmpty();
  _impl_.input_.ClearToEmpty();
  ::memset(&_impl_.cpu_limit_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.language_) -
      reinterpret_cast<char*>(&_impl_.cpu_limit_)) + sizeof(_impl_.language_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileRunRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_code();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "itach_oj.CompileRunRequest.code"));
        } else
          goto handle_unusual;
        continue;
      // string input = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "itach_oj.CompileRunRequest.input"));
        } else
          goto handle_unusual;
        continue;
      // int32 cpu_limit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.cpu_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 mem_limit = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.mem_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .itach_oj.CompileRunRequest.Language language = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_language(static_cast<::itach_oj::CompileRunRequest_Language>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompileRunRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:itach_oj.CompileRunRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_code().data(), static_cast<int>(this->_internal_code().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "itach_oj.CompileRunRequest.code");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_code(), target);
  }

  // string input = 2;
  if (!this->_internal_input().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input().data(), static_cast<int>(this->_internal_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "itach_oj.CompileRunRequest.input");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_input(), target);
  }

  // int32 cpu_limit = 3;
  if (this->_internal_cpu_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(3, this->_internal_cpu_limit(), target);
  }

  // int32 mem_limit = 4;
  if (this->_internal_mem_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_mem_limit(), target);
  }

  // .itach_oj.CompileRunRequest.Language language = 5;
  if (this->_internal_language() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_language(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itach_oj.CompileRunRequest)
  return target;
}

size_t CompileRunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itach_oj.CompileRunRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string code = 1;
  if (!this->_internal_code().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_code());
  }

  // string input = 2;
  if (!this->_internal_input().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input());
  }

  // int32 cpu_limit = 3;
  if (this->_internal_cpu_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_cpu_limit());
  }

  // int32 mem_limit = 4;
  if (this->_internal_mem_limit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_mem_limit());
  }

  // .itach_oj.CompileRunRequest.Language language = 5;
  if (this->_internal_language() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_language());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompileRunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileRunRequest::GetClassData() const { return &_class_data_; }


void CompileRunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompileRunRequest*>(&to_msg);
  auto& from = static_cast<const CompileRunRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:itach_oj.CompileRunRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_code().empty()) {
    _this->_internal_set_code(from._internal_code());
  }
  if (!from._internal_input().empty()) {
    _this->_internal_set_input(from._internal_input());
  }
  if (from._internal_cpu_limit() != 0) {
    _this->_internal_set_cpu_limit(from._internal_cpu_limit());
  }
  if (from._internal_mem_limit() != 0) {
    _this->_internal_set_mem_limit(from._internal_mem_limit());
  }
  if (from._internal_language() != 0) {
    _this->_internal_set_language(from._internal_language());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileRunRequest::CopyFrom(const CompileRunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itach_oj.CompileRunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileRunRequest::IsInitialized() const {
  return true;
}

void CompileRunRequest::InternalSwap(CompileRunRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.code_, lhs_arena,
      &other->_impl_.code_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.input_, lhs_arena,
      &other->_impl_.input_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompileRunRequest, _impl_.language_)
      + sizeof(CompileRunRequest::_impl_.language_)
      - PROTOBUF_FIELD_OFFSET(CompileRunRequest, _impl_.cpu_limit_)>(
          reinterpret_cast<char*>(&_impl_.cpu_limit_),
          reinterpret_cast<char*>(&other->_impl_.cpu_limit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileRunRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[0]);
}

// ===================================================================

class CompileRunResponse::_Internal {
 public:
};

CompileRunResponse::CompileRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:itach_oj.CompileRunResponse)
}
CompileRunResponse::CompileRunResponse(const CompileRunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CompileRunResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.proto_stdout_){}
    , decltype(_impl_.proto_stderr_){}
    , decltype(_impl_.last_error_input_){}
    , decltype(_impl_.status_){}
    , decltype(_impl_.pass_num_){}
    , decltype(_impl_.total_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reason().empty()) {
    _this->_impl_.reason_.Set(from._internal_reason(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proto_stdout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_stdout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto_stdout().empty()) {
    _this->_impl_.proto_stdout_.Set(from._internal_proto_stdout(), 
      _this->GetArenaForAllocation());
  }
  _impl_.proto_stderr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_stderr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_proto_stderr().empty()) {
    _this->_impl_.proto_stderr_.Set(from._internal_proto_stderr(), 
      _this->GetArenaForAllocation());
  }
  _impl_.last_error_input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_error_input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_last_error_input().empty()) {
    _this->_impl_.last_error_input_.Set(from._internal_last_error_input(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.status_, &from._impl_.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.total_num_) -
    reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.total_num_));
  // @@protoc_insertion_point(copy_constructor:itach_oj.CompileRunResponse)
}

inline void CompileRunResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.reason_){}
    , decltype(_impl_.proto_stdout_){}
    , decltype(_impl_.proto_stderr_){}
    , decltype(_impl_.last_error_input_){}
    , decltype(_impl_.status_){0}
    , decltype(_impl_.pass_num_){0}
    , decltype(_impl_.total_num_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.reason_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.reason_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_stdout_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_stdout_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.proto_stderr_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.proto_stderr_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.last_error_input_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.last_error_input_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

CompileRunResponse::~CompileRunResponse() {
  // @@protoc_insertion_point(destructor:itach_oj.CompileRunResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void CompileRunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.reason_.Destroy();
  _impl_.proto_stdout_.Destroy();
  _impl_.proto_stderr_.Destroy();
  _impl_.last_error_input_.Destroy();
}

void CompileRunResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CompileRunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:itach_oj.CompileRunResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.reason_.ClearToEmpty();
  _impl_.proto_stdout_.ClearToEmpty();
  _impl_.proto_stderr_.ClearToEmpty();
  _impl_.last_error_input_.ClearToEmpty();
  ::memset(&_impl_.status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.total_num_) -
      reinterpret_cast<char*>(&_impl_.status_)) + sizeof(_impl_.total_num_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompileRunResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string reason = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_reason();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "itach_oj.CompileRunResponse.reason"));
        } else
          goto handle_unusual;
        continue;
      // string proto_stdout = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_proto_stdout();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "itach_oj.CompileRunResponse.proto_stdout"));
        } else
          goto handle_unusual;
        continue;
      // string proto_stderr = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_proto_stderr();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "itach_oj.CompileRunResponse.proto_stderr"));
        } else
          goto handle_unusual;
        continue;
      // int32 pass_num = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.pass_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 total_num = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.total_num_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string last_error_input = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_last_error_input();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "itach_oj.CompileRunResponse.last_error_input"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CompileRunResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:itach_oj.CompileRunResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_status(), target);
  }

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reason().data(), static_cast<int>(this->_internal_reason().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "itach_oj.CompileRunResponse.reason");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_reason(), target);
  }

  // string proto_stdout = 3;
  if (!this->_internal_proto_stdout().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto_stdout().data(), static_cast<int>(this->_internal_proto_stdout().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "itach_oj.CompileRunResponse.proto_stdout");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_proto_stdout(), target);
  }

  // string proto_stderr = 4;
  if (!this->_internal_proto_stderr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_proto_stderr().data(), static_cast<int>(this->_internal_proto_stderr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "itach_oj.CompileRunResponse.proto_stderr");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_proto_stderr(), target);
  }

  // int32 pass_num = 5;
  if (this->_internal_pass_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(5, this->_internal_pass_num(), target);
  }

  // int32 total_num = 6;
  if (this->_internal_total_num() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(6, this->_internal_total_num(), target);
  }

  // string last_error_input = 7;
  if (!this->_internal_last_error_input().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_last_error_input().data(), static_cast<int>(this->_internal_last_error_input().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "itach_oj.CompileRunResponse.last_error_input");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_last_error_input(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:itach_oj.CompileRunResponse)
  return target;
}

size_t CompileRunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:itach_oj.CompileRunResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reason = 2;
  if (!this->_internal_reason().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reason());
  }

  // string proto_stdout = 3;
  if (!this->_internal_proto_stdout().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto_stdout());
  }

  // string proto_stderr = 4;
  if (!this->_internal_proto_stderr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_proto_stderr());
  }

  // string last_error_input = 7;
  if (!this->_internal_last_error_input().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_last_error_input());
  }

  // int32 status = 1;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_status());
  }

  // int32 pass_num = 5;
  if (this->_internal_pass_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_pass_num());
  }

  // int32 total_num = 6;
  if (this->_internal_total_num() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_total_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CompileRunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CompileRunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CompileRunResponse::GetClassData() const { return &_class_data_; }


void CompileRunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CompileRunResponse*>(&to_msg);
  auto& from = static_cast<const CompileRunResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:itach_oj.CompileRunResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reason().empty()) {
    _this->_internal_set_reason(from._internal_reason());
  }
  if (!from._internal_proto_stdout().empty()) {
    _this->_internal_set_proto_stdout(from._internal_proto_stdout());
  }
  if (!from._internal_proto_stderr().empty()) {
    _this->_internal_set_proto_stderr(from._internal_proto_stderr());
  }
  if (!from._internal_last_error_input().empty()) {
    _this->_internal_set_last_error_input(from._internal_last_error_input());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  if (from._internal_pass_num() != 0) {
    _this->_internal_set_pass_num(from._internal_pass_num());
  }
  if (from._internal_total_num() != 0) {
    _this->_internal_set_total_num(from._internal_total_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CompileRunResponse::CopyFrom(const CompileRunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:itach_oj.CompileRunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompileRunResponse::IsInitialized() const {
  return true;
}

void CompileRunResponse::InternalSwap(CompileRunResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.reason_, lhs_arena,
      &other->_impl_.reason_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_stdout_, lhs_arena,
      &other->_impl_.proto_stdout_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.proto_stderr_, lhs_arena,
      &other->_impl_.proto_stderr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.last_error_input_, lhs_arena,
      &other->_impl_.last_error_input_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompileRunResponse, _impl_.total_num_)
      + sizeof(CompileRunResponse::_impl_.total_num_)
      - PROTOBUF_FIELD_OFFSET(CompileRunResponse, _impl_.status_)>(
          reinterpret_cast<char*>(&_impl_.status_),
          reinterpret_cast<char*>(&other->_impl_.status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompileRunResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_message_2eproto_getter, &descriptor_table_message_2eproto_once,
      file_level_metadata_message_2eproto[1]);
}

// ===================================================================

CompileRunService::~CompileRunService() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CompileRunService::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_message_2eproto);
  return file_level_service_descriptors_message_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* CompileRunService::GetDescriptor() {
  return descriptor();
}

void CompileRunService::Start(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::itach_oj::CompileRunRequest*,
                         ::itach_oj::CompileRunResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Start() not implemented.");
  done->Run();
}

void CompileRunService::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_message_2eproto[0]);
  switch(method->index()) {
    case 0:
      Start(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::itach_oj::CompileRunRequest*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::itach_oj::CompileRunResponse*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CompileRunService::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::itach_oj::CompileRunRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& CompileRunService::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::itach_oj::CompileRunResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

CompileRunService_Stub::CompileRunService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
CompileRunService_Stub::CompileRunService_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
CompileRunService_Stub::~CompileRunService_Stub() {
  if (owns_channel_) delete channel_;
}

void CompileRunService_Stub::Start(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::itach_oj::CompileRunRequest* request,
                              ::itach_oj::CompileRunResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace itach_oj
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::itach_oj::CompileRunRequest*
Arena::CreateMaybeMessage< ::itach_oj::CompileRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::itach_oj::CompileRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::itach_oj::CompileRunResponse*
Arena::CreateMaybeMessage< ::itach_oj::CompileRunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::itach_oj::CompileRunResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
