// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_message_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_message_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_message_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_message_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_message_2eproto;
namespace itach_oj {
class CompileRunRequest;
struct CompileRunRequestDefaultTypeInternal;
extern CompileRunRequestDefaultTypeInternal _CompileRunRequest_default_instance_;
class CompileRunResponse;
struct CompileRunResponseDefaultTypeInternal;
extern CompileRunResponseDefaultTypeInternal _CompileRunResponse_default_instance_;
}  // namespace itach_oj
PROTOBUF_NAMESPACE_OPEN
template<> ::itach_oj::CompileRunRequest* Arena::CreateMaybeMessage<::itach_oj::CompileRunRequest>(Arena*);
template<> ::itach_oj::CompileRunResponse* Arena::CreateMaybeMessage<::itach_oj::CompileRunResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace itach_oj {

enum CompileRunRequest_Language : int {
  CompileRunRequest_Language_CPP = 0,
  CompileRunRequest_Language_JAVA = 1,
  CompileRunRequest_Language_GO = 2,
  CompileRunRequest_Language_CompileRunRequest_Language_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CompileRunRequest_Language_CompileRunRequest_Language_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CompileRunRequest_Language_IsValid(int value);
constexpr CompileRunRequest_Language CompileRunRequest_Language_Language_MIN = CompileRunRequest_Language_CPP;
constexpr CompileRunRequest_Language CompileRunRequest_Language_Language_MAX = CompileRunRequest_Language_GO;
constexpr int CompileRunRequest_Language_Language_ARRAYSIZE = CompileRunRequest_Language_Language_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CompileRunRequest_Language_descriptor();
template<typename T>
inline const std::string& CompileRunRequest_Language_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CompileRunRequest_Language>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CompileRunRequest_Language_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CompileRunRequest_Language_descriptor(), enum_t_value);
}
inline bool CompileRunRequest_Language_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CompileRunRequest_Language* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CompileRunRequest_Language>(
    CompileRunRequest_Language_descriptor(), name, value);
}
// ===================================================================

class CompileRunRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:itach_oj.CompileRunRequest) */ {
 public:
  inline CompileRunRequest() : CompileRunRequest(nullptr) {}
  ~CompileRunRequest() override;
  explicit PROTOBUF_CONSTEXPR CompileRunRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompileRunRequest(const CompileRunRequest& from);
  CompileRunRequest(CompileRunRequest&& from) noexcept
    : CompileRunRequest() {
    *this = ::std::move(from);
  }

  inline CompileRunRequest& operator=(const CompileRunRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileRunRequest& operator=(CompileRunRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileRunRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileRunRequest* internal_default_instance() {
    return reinterpret_cast<const CompileRunRequest*>(
               &_CompileRunRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CompileRunRequest& a, CompileRunRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileRunRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileRunRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompileRunRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompileRunRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompileRunRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompileRunRequest& from) {
    CompileRunRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileRunRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "itach_oj.CompileRunRequest";
  }
  protected:
  explicit CompileRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CompileRunRequest_Language Language;
  static constexpr Language CPP =
    CompileRunRequest_Language_CPP;
  static constexpr Language JAVA =
    CompileRunRequest_Language_JAVA;
  static constexpr Language GO =
    CompileRunRequest_Language_GO;
  static inline bool Language_IsValid(int value) {
    return CompileRunRequest_Language_IsValid(value);
  }
  static constexpr Language Language_MIN =
    CompileRunRequest_Language_Language_MIN;
  static constexpr Language Language_MAX =
    CompileRunRequest_Language_Language_MAX;
  static constexpr int Language_ARRAYSIZE =
    CompileRunRequest_Language_Language_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Language_descriptor() {
    return CompileRunRequest_Language_descriptor();
  }
  template<typename T>
  static inline const std::string& Language_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Language>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Language_Name.");
    return CompileRunRequest_Language_Name(enum_t_value);
  }
  static inline bool Language_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Language* value) {
    return CompileRunRequest_Language_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kCodeFieldNumber = 1,
    kInputFieldNumber = 2,
    kCpuLimitFieldNumber = 3,
    kMemLimitFieldNumber = 4,
    kLanguageFieldNumber = 5,
  };
  // string code = 1;
  void clear_code();
  const std::string& code() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_code(ArgT0&& arg0, ArgT... args);
  std::string* mutable_code();
  PROTOBUF_NODISCARD std::string* release_code();
  void set_allocated_code(std::string* code);
  private:
  const std::string& _internal_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_code(const std::string& value);
  std::string* _internal_mutable_code();
  public:

  // string input = 2;
  void clear_input();
  const std::string& input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_input();
  PROTOBUF_NODISCARD std::string* release_input();
  void set_allocated_input(std::string* input);
  private:
  const std::string& _internal_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_input(const std::string& value);
  std::string* _internal_mutable_input();
  public:

  // int32 cpu_limit = 3;
  void clear_cpu_limit();
  int32_t cpu_limit() const;
  void set_cpu_limit(int32_t value);
  private:
  int32_t _internal_cpu_limit() const;
  void _internal_set_cpu_limit(int32_t value);
  public:

  // int32 mem_limit = 4;
  void clear_mem_limit();
  int32_t mem_limit() const;
  void set_mem_limit(int32_t value);
  private:
  int32_t _internal_mem_limit() const;
  void _internal_set_mem_limit(int32_t value);
  public:

  // .itach_oj.CompileRunRequest.Language language = 5;
  void clear_language();
  ::itach_oj::CompileRunRequest_Language language() const;
  void set_language(::itach_oj::CompileRunRequest_Language value);
  private:
  ::itach_oj::CompileRunRequest_Language _internal_language() const;
  void _internal_set_language(::itach_oj::CompileRunRequest_Language value);
  public:

  // @@protoc_insertion_point(class_scope:itach_oj.CompileRunRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr code_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_;
    int32_t cpu_limit_;
    int32_t mem_limit_;
    int language_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// -------------------------------------------------------------------

class CompileRunResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:itach_oj.CompileRunResponse) */ {
 public:
  inline CompileRunResponse() : CompileRunResponse(nullptr) {}
  ~CompileRunResponse() override;
  explicit PROTOBUF_CONSTEXPR CompileRunResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CompileRunResponse(const CompileRunResponse& from);
  CompileRunResponse(CompileRunResponse&& from) noexcept
    : CompileRunResponse() {
    *this = ::std::move(from);
  }

  inline CompileRunResponse& operator=(const CompileRunResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompileRunResponse& operator=(CompileRunResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CompileRunResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CompileRunResponse* internal_default_instance() {
    return reinterpret_cast<const CompileRunResponse*>(
               &_CompileRunResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CompileRunResponse& a, CompileRunResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CompileRunResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompileRunResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CompileRunResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CompileRunResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CompileRunResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CompileRunResponse& from) {
    CompileRunResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompileRunResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "itach_oj.CompileRunResponse";
  }
  protected:
  explicit CompileRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kProtoStdoutFieldNumber = 3,
    kProtoStderrFieldNumber = 4,
    kLastErrorInputFieldNumber = 7,
    kStatusFieldNumber = 1,
    kPassNumFieldNumber = 5,
    kTotalNumFieldNumber = 6,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string proto_stdout = 3;
  void clear_proto_stdout();
  const std::string& proto_stdout() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_stdout(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_stdout();
  PROTOBUF_NODISCARD std::string* release_proto_stdout();
  void set_allocated_proto_stdout(std::string* proto_stdout);
  private:
  const std::string& _internal_proto_stdout() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_stdout(const std::string& value);
  std::string* _internal_mutable_proto_stdout();
  public:

  // string proto_stderr = 4;
  void clear_proto_stderr();
  const std::string& proto_stderr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_proto_stderr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_proto_stderr();
  PROTOBUF_NODISCARD std::string* release_proto_stderr();
  void set_allocated_proto_stderr(std::string* proto_stderr);
  private:
  const std::string& _internal_proto_stderr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_proto_stderr(const std::string& value);
  std::string* _internal_mutable_proto_stderr();
  public:

  // string last_error_input = 7;
  void clear_last_error_input();
  const std::string& last_error_input() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_last_error_input(ArgT0&& arg0, ArgT... args);
  std::string* mutable_last_error_input();
  PROTOBUF_NODISCARD std::string* release_last_error_input();
  void set_allocated_last_error_input(std::string* last_error_input);
  private:
  const std::string& _internal_last_error_input() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_last_error_input(const std::string& value);
  std::string* _internal_mutable_last_error_input();
  public:

  // int32 status = 1;
  void clear_status();
  int32_t status() const;
  void set_status(int32_t value);
  private:
  int32_t _internal_status() const;
  void _internal_set_status(int32_t value);
  public:

  // int32 pass_num = 5;
  void clear_pass_num();
  int32_t pass_num() const;
  void set_pass_num(int32_t value);
  private:
  int32_t _internal_pass_num() const;
  void _internal_set_pass_num(int32_t value);
  public:

  // int32 total_num = 6;
  void clear_total_num();
  int32_t total_num() const;
  void set_total_num(int32_t value);
  private:
  int32_t _internal_total_num() const;
  void _internal_set_total_num(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:itach_oj.CompileRunResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_stdout_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr proto_stderr_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr last_error_input_;
    int32_t status_;
    int32_t pass_num_;
    int32_t total_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_message_2eproto;
};
// ===================================================================

class CompileRunService_Stub;

class CompileRunService : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline CompileRunService() {};
 public:
  virtual ~CompileRunService();

  typedef CompileRunService_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Start(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::itach_oj::CompileRunRequest* request,
                       ::itach_oj::CompileRunResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CompileRunService);
};

class CompileRunService_Stub : public CompileRunService {
 public:
  CompileRunService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  CompileRunService_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~CompileRunService_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements CompileRunService ------------------------------------------

  void Start(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::itach_oj::CompileRunRequest* request,
                       ::itach_oj::CompileRunResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(CompileRunService_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CompileRunRequest

// string code = 1;
inline void CompileRunRequest::clear_code() {
  _impl_.code_.ClearToEmpty();
}
inline const std::string& CompileRunRequest::code() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunRequest.code)
  return _internal_code();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompileRunRequest::set_code(ArgT0&& arg0, ArgT... args) {
 
 _impl_.code_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunRequest.code)
}
inline std::string* CompileRunRequest::mutable_code() {
  std::string* _s = _internal_mutable_code();
  // @@protoc_insertion_point(field_mutable:itach_oj.CompileRunRequest.code)
  return _s;
}
inline const std::string& CompileRunRequest::_internal_code() const {
  return _impl_.code_.Get();
}
inline void CompileRunRequest::_internal_set_code(const std::string& value) {
  
  _impl_.code_.Set(value, GetArenaForAllocation());
}
inline std::string* CompileRunRequest::_internal_mutable_code() {
  
  return _impl_.code_.Mutable(GetArenaForAllocation());
}
inline std::string* CompileRunRequest::release_code() {
  // @@protoc_insertion_point(field_release:itach_oj.CompileRunRequest.code)
  return _impl_.code_.Release();
}
inline void CompileRunRequest::set_allocated_code(std::string* code) {
  if (code != nullptr) {
    
  } else {
    
  }
  _impl_.code_.SetAllocated(code, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.code_.IsDefault()) {
    _impl_.code_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:itach_oj.CompileRunRequest.code)
}

// string input = 2;
inline void CompileRunRequest::clear_input() {
  _impl_.input_.ClearToEmpty();
}
inline const std::string& CompileRunRequest::input() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunRequest.input)
  return _internal_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompileRunRequest::set_input(ArgT0&& arg0, ArgT... args) {
 
 _impl_.input_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunRequest.input)
}
inline std::string* CompileRunRequest::mutable_input() {
  std::string* _s = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:itach_oj.CompileRunRequest.input)
  return _s;
}
inline const std::string& CompileRunRequest::_internal_input() const {
  return _impl_.input_.Get();
}
inline void CompileRunRequest::_internal_set_input(const std::string& value) {
  
  _impl_.input_.Set(value, GetArenaForAllocation());
}
inline std::string* CompileRunRequest::_internal_mutable_input() {
  
  return _impl_.input_.Mutable(GetArenaForAllocation());
}
inline std::string* CompileRunRequest::release_input() {
  // @@protoc_insertion_point(field_release:itach_oj.CompileRunRequest.input)
  return _impl_.input_.Release();
}
inline void CompileRunRequest::set_allocated_input(std::string* input) {
  if (input != nullptr) {
    
  } else {
    
  }
  _impl_.input_.SetAllocated(input, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.input_.IsDefault()) {
    _impl_.input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:itach_oj.CompileRunRequest.input)
}

// int32 cpu_limit = 3;
inline void CompileRunRequest::clear_cpu_limit() {
  _impl_.cpu_limit_ = 0;
}
inline int32_t CompileRunRequest::_internal_cpu_limit() const {
  return _impl_.cpu_limit_;
}
inline int32_t CompileRunRequest::cpu_limit() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunRequest.cpu_limit)
  return _internal_cpu_limit();
}
inline void CompileRunRequest::_internal_set_cpu_limit(int32_t value) {
  
  _impl_.cpu_limit_ = value;
}
inline void CompileRunRequest::set_cpu_limit(int32_t value) {
  _internal_set_cpu_limit(value);
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunRequest.cpu_limit)
}

// int32 mem_limit = 4;
inline void CompileRunRequest::clear_mem_limit() {
  _impl_.mem_limit_ = 0;
}
inline int32_t CompileRunRequest::_internal_mem_limit() const {
  return _impl_.mem_limit_;
}
inline int32_t CompileRunRequest::mem_limit() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunRequest.mem_limit)
  return _internal_mem_limit();
}
inline void CompileRunRequest::_internal_set_mem_limit(int32_t value) {
  
  _impl_.mem_limit_ = value;
}
inline void CompileRunRequest::set_mem_limit(int32_t value) {
  _internal_set_mem_limit(value);
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunRequest.mem_limit)
}

// .itach_oj.CompileRunRequest.Language language = 5;
inline void CompileRunRequest::clear_language() {
  _impl_.language_ = 0;
}
inline ::itach_oj::CompileRunRequest_Language CompileRunRequest::_internal_language() const {
  return static_cast< ::itach_oj::CompileRunRequest_Language >(_impl_.language_);
}
inline ::itach_oj::CompileRunRequest_Language CompileRunRequest::language() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunRequest.language)
  return _internal_language();
}
inline void CompileRunRequest::_internal_set_language(::itach_oj::CompileRunRequest_Language value) {
  
  _impl_.language_ = value;
}
inline void CompileRunRequest::set_language(::itach_oj::CompileRunRequest_Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunRequest.language)
}

// -------------------------------------------------------------------

// CompileRunResponse

// int32 status = 1;
inline void CompileRunResponse::clear_status() {
  _impl_.status_ = 0;
}
inline int32_t CompileRunResponse::_internal_status() const {
  return _impl_.status_;
}
inline int32_t CompileRunResponse::status() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunResponse.status)
  return _internal_status();
}
inline void CompileRunResponse::_internal_set_status(int32_t value) {
  
  _impl_.status_ = value;
}
inline void CompileRunResponse::set_status(int32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunResponse.status)
}

// string reason = 2;
inline void CompileRunResponse::clear_reason() {
  _impl_.reason_.ClearToEmpty();
}
inline const std::string& CompileRunResponse::reason() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunResponse.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompileRunResponse::set_reason(ArgT0&& arg0, ArgT... args) {
 
 _impl_.reason_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunResponse.reason)
}
inline std::string* CompileRunResponse::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:itach_oj.CompileRunResponse.reason)
  return _s;
}
inline const std::string& CompileRunResponse::_internal_reason() const {
  return _impl_.reason_.Get();
}
inline void CompileRunResponse::_internal_set_reason(const std::string& value) {
  
  _impl_.reason_.Set(value, GetArenaForAllocation());
}
inline std::string* CompileRunResponse::_internal_mutable_reason() {
  
  return _impl_.reason_.Mutable(GetArenaForAllocation());
}
inline std::string* CompileRunResponse::release_reason() {
  // @@protoc_insertion_point(field_release:itach_oj.CompileRunResponse.reason)
  return _impl_.reason_.Release();
}
inline void CompileRunResponse::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  _impl_.reason_.SetAllocated(reason, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.reason_.IsDefault()) {
    _impl_.reason_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:itach_oj.CompileRunResponse.reason)
}

// string proto_stdout = 3;
inline void CompileRunResponse::clear_proto_stdout() {
  _impl_.proto_stdout_.ClearToEmpty();
}
inline const std::string& CompileRunResponse::proto_stdout() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunResponse.proto_stdout)
  return _internal_proto_stdout();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompileRunResponse::set_proto_stdout(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proto_stdout_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunResponse.proto_stdout)
}
inline std::string* CompileRunResponse::mutable_proto_stdout() {
  std::string* _s = _internal_mutable_proto_stdout();
  // @@protoc_insertion_point(field_mutable:itach_oj.CompileRunResponse.proto_stdout)
  return _s;
}
inline const std::string& CompileRunResponse::_internal_proto_stdout() const {
  return _impl_.proto_stdout_.Get();
}
inline void CompileRunResponse::_internal_set_proto_stdout(const std::string& value) {
  
  _impl_.proto_stdout_.Set(value, GetArenaForAllocation());
}
inline std::string* CompileRunResponse::_internal_mutable_proto_stdout() {
  
  return _impl_.proto_stdout_.Mutable(GetArenaForAllocation());
}
inline std::string* CompileRunResponse::release_proto_stdout() {
  // @@protoc_insertion_point(field_release:itach_oj.CompileRunResponse.proto_stdout)
  return _impl_.proto_stdout_.Release();
}
inline void CompileRunResponse::set_allocated_proto_stdout(std::string* proto_stdout) {
  if (proto_stdout != nullptr) {
    
  } else {
    
  }
  _impl_.proto_stdout_.SetAllocated(proto_stdout, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_stdout_.IsDefault()) {
    _impl_.proto_stdout_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:itach_oj.CompileRunResponse.proto_stdout)
}

// string proto_stderr = 4;
inline void CompileRunResponse::clear_proto_stderr() {
  _impl_.proto_stderr_.ClearToEmpty();
}
inline const std::string& CompileRunResponse::proto_stderr() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunResponse.proto_stderr)
  return _internal_proto_stderr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompileRunResponse::set_proto_stderr(ArgT0&& arg0, ArgT... args) {
 
 _impl_.proto_stderr_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunResponse.proto_stderr)
}
inline std::string* CompileRunResponse::mutable_proto_stderr() {
  std::string* _s = _internal_mutable_proto_stderr();
  // @@protoc_insertion_point(field_mutable:itach_oj.CompileRunResponse.proto_stderr)
  return _s;
}
inline const std::string& CompileRunResponse::_internal_proto_stderr() const {
  return _impl_.proto_stderr_.Get();
}
inline void CompileRunResponse::_internal_set_proto_stderr(const std::string& value) {
  
  _impl_.proto_stderr_.Set(value, GetArenaForAllocation());
}
inline std::string* CompileRunResponse::_internal_mutable_proto_stderr() {
  
  return _impl_.proto_stderr_.Mutable(GetArenaForAllocation());
}
inline std::string* CompileRunResponse::release_proto_stderr() {
  // @@protoc_insertion_point(field_release:itach_oj.CompileRunResponse.proto_stderr)
  return _impl_.proto_stderr_.Release();
}
inline void CompileRunResponse::set_allocated_proto_stderr(std::string* proto_stderr) {
  if (proto_stderr != nullptr) {
    
  } else {
    
  }
  _impl_.proto_stderr_.SetAllocated(proto_stderr, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.proto_stderr_.IsDefault()) {
    _impl_.proto_stderr_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:itach_oj.CompileRunResponse.proto_stderr)
}

// int32 pass_num = 5;
inline void CompileRunResponse::clear_pass_num() {
  _impl_.pass_num_ = 0;
}
inline int32_t CompileRunResponse::_internal_pass_num() const {
  return _impl_.pass_num_;
}
inline int32_t CompileRunResponse::pass_num() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunResponse.pass_num)
  return _internal_pass_num();
}
inline void CompileRunResponse::_internal_set_pass_num(int32_t value) {
  
  _impl_.pass_num_ = value;
}
inline void CompileRunResponse::set_pass_num(int32_t value) {
  _internal_set_pass_num(value);
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunResponse.pass_num)
}

// int32 total_num = 6;
inline void CompileRunResponse::clear_total_num() {
  _impl_.total_num_ = 0;
}
inline int32_t CompileRunResponse::_internal_total_num() const {
  return _impl_.total_num_;
}
inline int32_t CompileRunResponse::total_num() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunResponse.total_num)
  return _internal_total_num();
}
inline void CompileRunResponse::_internal_set_total_num(int32_t value) {
  
  _impl_.total_num_ = value;
}
inline void CompileRunResponse::set_total_num(int32_t value) {
  _internal_set_total_num(value);
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunResponse.total_num)
}

// string last_error_input = 7;
inline void CompileRunResponse::clear_last_error_input() {
  _impl_.last_error_input_.ClearToEmpty();
}
inline const std::string& CompileRunResponse::last_error_input() const {
  // @@protoc_insertion_point(field_get:itach_oj.CompileRunResponse.last_error_input)
  return _internal_last_error_input();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CompileRunResponse::set_last_error_input(ArgT0&& arg0, ArgT... args) {
 
 _impl_.last_error_input_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:itach_oj.CompileRunResponse.last_error_input)
}
inline std::string* CompileRunResponse::mutable_last_error_input() {
  std::string* _s = _internal_mutable_last_error_input();
  // @@protoc_insertion_point(field_mutable:itach_oj.CompileRunResponse.last_error_input)
  return _s;
}
inline const std::string& CompileRunResponse::_internal_last_error_input() const {
  return _impl_.last_error_input_.Get();
}
inline void CompileRunResponse::_internal_set_last_error_input(const std::string& value) {
  
  _impl_.last_error_input_.Set(value, GetArenaForAllocation());
}
inline std::string* CompileRunResponse::_internal_mutable_last_error_input() {
  
  return _impl_.last_error_input_.Mutable(GetArenaForAllocation());
}
inline std::string* CompileRunResponse::release_last_error_input() {
  // @@protoc_insertion_point(field_release:itach_oj.CompileRunResponse.last_error_input)
  return _impl_.last_error_input_.Release();
}
inline void CompileRunResponse::set_allocated_last_error_input(std::string* last_error_input) {
  if (last_error_input != nullptr) {
    
  } else {
    
  }
  _impl_.last_error_input_.SetAllocated(last_error_input, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.last_error_input_.IsDefault()) {
    _impl_.last_error_input_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:itach_oj.CompileRunResponse.last_error_input)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace itach_oj

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::itach_oj::CompileRunRequest_Language> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::itach_oj::CompileRunRequest_Language>() {
  return ::itach_oj::CompileRunRequest_Language_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_message_2eproto
